question:
lim<sub>x->&infin;</sub>(x-sinx)/(x+cosx)
equals
options:
(a)
1
(b)
-1
(c)
&infin;
(d)
-&infin;
p,
q,
r
subsets
universal
set
u,
(p
&cap;
q
r)
&cup;
(p<sup>c</sup>
q<sup>c</sup>
r<sup>c</sup>
p
p<sup>c</sup>
u
following
system
equations
x<sub>1</sub>
+
x<sub>2</sub>
2x<sub>3</sub>
=
2x<sub>2</sub>
3x<sub>3</sub>
2
4x<sub>2</sub>
&alpha;x<sub>3</sub>
4
unique
solution.
possible
value(s)
&alpha;
is/are
0
either
one
0,
real
number
ieee
floating
point
representation
hexadecimal
value
0x00000000
corresponds
normalized
2<sup>-127</sup>
2<sup>-126</sup>
+0
special
karnaugh
map
shown
below,
x
denotes
don’t
care
term.
minimal
form
function
represented
map?
<img
src="img/2008_5.png"
width="100px"
height="100px"/>
<span
class="above_bar">b</span>.<span
class="above_bar">d</span>+<span
class="above_bar">a</span>.<span
class="above_bar">d</span>
class="above_bar">b</span>+<span
class="above_bar">b.<span
class="above_bar">a</span>.b.<span
let
denote
radix.
satisfy
equation
&radic;121<sub>r</sub>
=11<sub>r</sub>
decimal
10
11
>
efficient
algorithm
finding
connected
components
undirected
graph
n
vertices
edges
time
complexity
&theta;(n)
&theta;(m)
&theta;(m+n)
&theta;(mn)
given
f<sub>1</sub>,
f<sub>3</sub>
f
canonical
sum
products
(in
decimal)
circuit
src="img/2008_8.png"
f<sub>1</sub>
&sum;m(4,
5,
6,
7,
8)
&sum;m(1,
15)
8,
f<sub>2</sub>
6)
&sum;m(6,
true
language
{a<sup>p</sup>|
prime}?
accepted
turing
machine
regular
context-free
neither
context-free,
decidable?
i.
whether
intersection
two
languages
infinite
ii.
iii.
push-down
automata
accept
iv.
grammar
ii
iv
iii
describes
handle
(as
applicable
lr-parsing)
appropriately?
position
sentential
next
shift
reduce
operation
occur
non-terminal
whose
production
used
reduction
step
may
future
along
right
hand
side
found
code
optimizations
carried
intermediate
enhance
portability
compiler
target
processors
program
analysis
accurate
information
dataflow
cannot
otherwise
optimization
front
end
l
class="above_bar">l</span>
recursively
enumerable
context-sensitive
recursive
maximum
size
data
application
layer
pass
tcp
below?
2<sup>16</sup>
bytes
—
header
1500
tuple
relational
calculus
expression(s)
equivalent
&forall;t
&isin;
r(p(t))?
&not;&exist;
r(p(t))
&exist;
&notin;
r(&not;p(t))
clustering
index
defined
fields
type
non-key
ordering
non-ordering
key
calls
results
sending
syn
packets?
socket
bind
listen
connect
combination
integer
variables
x,
z
makes
variable
get
expression?
(x
y)
?
((x
z)
:
z):((y
x=3,
y=4,
z=2
x=6,
y=5,
z=3
y=3,
z=5
x=5,
breadth
first
search
implemented
using
queue
structure.
order
visiting
nodes
src="img/2008_19.png"
mnopqr
nqmpor
qmnpro
qmnpor
blocks
large
file
unix
allocated
contiguous
allocation
linked
indexed
extension
minimum
equal
length
subintervals
needed
approximate
<sup>2</sup>&int;<sub>1</sub>xe<sup>x</sup>
dx
accuracy
least
1/3
<sup>-6</sup>
trapezoidal
rule
1000e
1000
100e
100
newton-raphson
iteration
x<sub>n+1</sub
>=
1/2(x<sub>n</sub>
(r/x<sub>n</sub>))
compute
square
reciprocal
root
logarithm
statements
every
planar
vertices?
eulerian
vertex-cover
3n/4
independent
n/3
&sum;<sub>1
&le;
2k
odd</sub>
even</sub>i,
k
positive
integer.
-
curve
said
extremum
local
maximum.
distinct
extrema
3x<sup>4</sup>
16x<sup>3</sup>
24x<sup>2/sup>
37
3
boolean
variables,
class="above_bar">q</span>)(p.<span
class="above_bar">q</span>
p.r)(<span
class="above_bar">p</span>.<span
class="above_bar">r</span>
class="above_bar">q</span>)
simplifies
p.<span
aishwarya
studies
computer
science
mathematics
everyday.
day,
probability
day
0.6.
0.4.
monday,
wednesday?
0.24
0.36
0.4
0.6
many
matrices
eigenvalue
1?
[1
0],
[0
1],
-1]
[-1
0]
1]
three
four
random
normal
distribution
mean
+1
variance
4.
another
—1
unknown.
p(
-1)
&ge;
2),
standard
deviation
&radic;2
fsa
pda
predicates
fsa(x)
means
finite
state
automaton,
pda(y)
pushdown
automaton.
predicate
equivalent(a,b)
b
equivalent.
logic
represents
following:
automaton
(&forall;x
fsa(x))
&implies;
(&exist;y
&and;
,
y))
&sim;&forall;y
(&exist;x
&forall;x
&exist;y
(fsa(x)
(fsa(y)
pda(x)
propositions.
logical
expressions
equivalent?
&or;
&sim;q
&sim;(&sim;p
q)
v
&sim;q)
(&sim;p
i,
ii,
magnetic
disk
concentric
circular
tracks,
seek
latency
linearly
proportional
distance
due
non-uniform
requests
arm
starting
stopping
inertia
higher
capacity
tracks
periphery
platter
use
unfair
scheduling
policies
auto-increment
addressing
mode?
useful
creating
self-relocating
included
instruction
architecture,
additional
alu
required
effective
address
calculation
amount
increment
depends
item
accessed
must
rfe
(return
exception)
general
purpose
processor?
trap
privileged
exception
allowed
execution
inclusion
hold
cache
levels
l1
l2
multi-level
hierarchy,
necessary?
write-through
associativity
greater
li
pipelined
bypassing
raw
hazards.
register
renaming
eliminate
war
control
hazard
penalties
eliminated
dynamic
branch
prediction.
multiple
windows
overlap
causes
memory
accesses
locals
parameters
saves
restores
fetches
pipeline,
earliest
tlb
(translation
lookaside
buffer)
started
completed
lookup
consider
functions:
f(n)
2<sup>n</sup>
g(n)
n!
h(n)
n<sup>log
n</sup>
asymptotic
behaviour
f(n),
g(n),
true?
o(g(n));
o(h(n))
&omega;(g(n));
o(f(n));
o(f(n))
&omega;(f(n))
comparisons
determine
appears
/2
times
sorted
array
integers
&theta;(log
n)
&theta;(log<sup>*</sup>
&theta;(1)
b-tree
built
scratch
successive
insertions.
node
splitting
operations
take
place?
5
6
g
2n-2
edges.
partitioned
edge-disjoint
spanning
trees.
g?
subset
vertices,
induced
subgraph
2k-2
cut
paths
pair
vertex-disjoint
quicksort
algorithm.
suppose
procedure
pivot
element
splits
list
sub-lists
contains
one-fifth
elements.
t(n)
sort
elements,
2t(n/5)+n
t(n/5)+t(4n/5)+n
2t(4n/5)+n
2t(n/2)+n
subset-sum
problem
follows:
w,
elements
w.
solves
o(nw)
time.
false?
polynomial
input
encoded
unary
binary
belongs
class
np
np-hard
src="img/2008_45.png"
dijkstra’s
single
source
shortest
path
run
vertex
graph,
computes
correct
a,
e,
f,
g,
h
b,
c,
postorder
traversal,
tree
1,2,...,n.
traversal.
this?
&theta;(nlog
none
above,
uniquely
determined.
heap
wish
insert
(not
necessarily
another)
heap.
total
&theta;(n<sup>2</sup>)
nfa
converted
dfa
non-deterministic
deterministic
also
(&rarr;
indicates
start
final
state)
src="img/2008_49_1.png"
src="img/2008_49_a.png"
src="img/2008_49_b.png"
src="img/2008_49_c.png"
src="img/2008_49_d.png"
left-recursive
right-recursive
vice-versa
-productions
removed
suitable
transformations
generated
productions
&rarr;
w
wy
(where,
string
terminals
non-terminal),
always
derivation
trees
strings
chomsky
match
(e)
checking
identifiers
(p)
l=
{a<sup>n</sup>b<sup>m</sup>c<sup>n</sup>d<sup>m</sup>
|n
1,m
1}
declared
(f)
formal
(q)
|
c
declaration
agrees
actual
(g)
arithmetic
(r)
{wcw|
(a
b)<sup>*</sup>}
matched
pairs
parentheses
(h)
palindromes
(s)
&epsilon;
e-p,
f-r,
g-q,
h-s
e-r,
f-p,
g-s,
h-q
nfas
correspond
to.
src="img/2008_52.png"
1.
0(01<sup>*</sup>1+00)<sup>*</sup>01<sup>*</sup>
2.
0(10<sup>*</sup>1+00)<sup>*</sup>0
3.
0(10<sup>*</sup>1+10)<sup>*</sup>1
0(10<sup>*</sup>1+10)<sup>*</sup>10<sup>*</sup>
p-2,
q-1,
r-3,
s-4
p-1,
q-3,
r-2,
q-2,
p-3,
r-1,
sets?
{a<sup>n</sup>b<sup>2m</sup>|n&ge;0,
m&ge;0}
{a<sup>n</sup>b<sup>m</sup>|n=2m}
{a<sup>n</sup>b<sup>m</sup>|n&ne;m}
{xcy|
x,y
{a,b}<sup>*</sup>}
programming
permit
global
kind
nesting
procedures/functions,
permits
recursion
static
storage
access
link
(or
display)
arrangement
arrange
activation
records
procedures/functions
require
scheme
stack-based
v.
return
result
i,ii
lalr(1)
parser
shift-reduce
(s-r)
conflicts
slr(1)
s-r
lr(1)
lr(0)
reduce-reduce
slow
phase
congestion
algorithm,
window
increase
increases
quadratically
exponentially
network
internet
subnet
mask
255.255.248.0,
hosts
per
subnet?
1022
1023
2046
2047
10mbps
regulated
token
bucket.
bucket
filled
rate
2mbps.
initially
16
megabits.
duration
transmit
full
1ombps?
1.6
seconds
8
client
process
needs
make
connection
server
s.
situation:
executes
(),
bind()
listen()
call
order,
preempted.
subsequently,
()
followed
executed
call.
events
could
returns
successfully
error
core
dump
printed
program?
;
<code>
int
f(int
*py,
**ppz)
void
main()
{
y,
z;
*b,
**a;
**ppz
+=
1;
*ppz;
4;
&c;
&b;
*py
2;
printf("%d",
f(c,
a));
3;
}
x+y+z;
</code>
18
19
21
22
choose
option
fill
?1
?2
prints
reverse
order.
assume
terminated
newline
character.
(void)
c;
if(?1)
reverse();
printf("enter
text");
printf("\n");
(getchar()
!=
'\n')
getchar(c);
(c
getchar())
getchar(c)
'\n"')
putchar(c);
((c=
getchar()))(!=)'\n')
putchar(c)
takes
singly-linked
parameter
rearranges
list.
called
containing
1,2,3,4,5,6,7
contents
completes
execution?
struct
value;
*next;
};
rearrange
(struct
*list)
*p,
*q;
temp;
(!list
||
!list
->
next)
return;
list;
next;
temp
?p
0;
2,1,4,3,6,5,7
1,3,2,5,4,7,6
2,3,4,5,6,7,1
counting
semaphores,
semaphore,
p(s):
<
wait;
v(s):
<=
wakeup
waiting
s;
p<sub>b</sub>
v<sub>b</sub>,
wait
signal
semaphores
provided.
x<sub>b</sub>
y<sub>b</sub>
implement
semaphore
p(s)
v(s)
p<sub>b</sub>(x<sub>b</sub>);
if(s
0)
v<sub>b</sub>(x<sub>b</sub>);
p<sub>b</sub>(y<sub>b</sub>);
else
(s
v<sub>b</sub>(y<sub>b</sub>);
initial
values
respectively
synchronous
asynchronous
i/o
isr
invoked
completion
i/o,
(interrupt
service
routine)
making
waits
complete,
1/o
case
woken
deadlock
prevention
avoidance
schemes?
prevention,
request
resources
granted
resulting
safe
avoidance,
less
restrictive
requires
knowledge
resource
requirements
priority
for(i=0;
n;
i++)
fork();
child
processes
created
2<sup>n+1</sup>
processor
uses
36
bit
physical
addresses
32
virtual
addresses,
page
frame
kbytes.
table
entry
bytes.
level
virtual-to-
translation,
follows
bits
30-31
table,
21-29
second
12-20
third
0-11
offset
within
page.
frame)
first,
tables
20,
20
24,
24
25,
25
relations
schema
r(<ins>p</ins>,
<ins>q</ins>,
r1,
r2,
r3)
s(<ins>p</ins>,
s1,
s2)
{p,q}
schemas.
queries
&prod;<sub>p</sub>(r
&bowtie;
s)
&prod;<sub>p</sub>(r)
&prod;<sub>p</sub>(s)
&prod;<sub>p</sub>(&prod;<sub>p,q</sub>(r)
&prod;<sub>p,q</sub>(s))
(&prod;<sub>p,q</sub>(r)-&prod;<sub>p,q</sub>(s)))
1v
schemes
library
database:
book
(title,
author,
catalog_no,
publisher,
year,
price)
collection
catalog_no)
functional
dependencies:
title
author
catalog_no
publisher
year
price
{author,title}
schemes.
bcnf
3nf
2nf
16384
records.
record
long
field
ordered
field,
organization
unspanned.
stored
block
1024
bytes,
pointer
secondary
file,
store
index,
first-level
second-level
128
256
512
2-way
associative
64
kbytes
managed
begins
double
arr
[1024]
[1024];
j;
/*
initialize
0.0
*/
(i
i<
1024;
(j
j
j++)
[i]
[j]
0.0;
8bytes.
located
beginning
oxff000
row
major
empty
pre-fetching
done.
references
made
arr.
tags
directory
kbits
34
68
[0]
[0]?
[4]
[5]
hit
ratio
initialization
loop
0%
25%
50%
75%
f1(
)
(n
==
1)
(2*f1(n-1)
3*f1(n-2));
f2
(
i;
x[n],
y[n],
z[n];
x[0]
y[0]
z[0])
x[1]
y[1]
z[1]
i++){
x[i]
y[i-1]
z[i-2];
y[i]
*
x[i];
z[i]
x[n];
running
f1(n)
f2(n)
&theta;(2<sup>n</sup>)
f1(8)
f2(8)
1661
1640
59
delayed
branching
help
handling
conditional
instructions,
irrespective
condition
evaluates
false,
fall
taken
longer
execute
ona
delay
slot:
i1:
add
r2
&larr;
r7
r8
i2:
sub
r4
r5
r6
i3:
r1
r3
i4:
memory[r4]
label
instructions
i1,
i2,
i3
i4
legitimately
occupy
slot
without
modification?
i1
i2
x<sub>n</sub>,
contain
consecutive
os,
recurrences
satisfy?
x<sub>n</sub>
2x<sub>n-1</sub>
x<sub>&lfloor;n/2&rfloor;</sub>
x<sub>n-1</sub>
x<sub>n-2</sub>
x<sub>5</sub>
7
follows.
integers,
{a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,..a<sub>n</sub>}
w?
solving
2-dimensional
array,
rows
w+1
columns,
x[i,j]
1&le;i&le;n,
0&le;j&le;w,
{a<sub>1</sub>,a<sub>2</sub>,..a<sub>i</sub>}
j.
valid
2&le;i&le;n
a<sub>i</sub>&le;j&le;w?
x[i,
j]=x[i-1,
j]
a<sub>i</sub>]
x[i-1,
true,
implies
x[1,w]
x[n,0]
x[n,w]
x[n-1,n]
er
diagram
src="img/2008_82.png"
represent
m,n,p,r1,r2
attribute
answer
question?
{m1,
m2,
m3,
p1}
p1,
n1,
n2}
n1}
attempts
locate
y[]
search.
erroneous.
y[10],
x){
j,
k;
i=
9;
5.
(i+j)/2
6.
if(y[k]
x)
=k;
7.
((y[k]
&&
j));
8.
(y[k]
printf
("x
is,
array");
9.
printf("x
10.
fail?
9
10]
13
15
17
19]
[2
2]
12
14
20]
even
correction
work
properly
change
line
to:
(y([k]
k+1;
k-1;
((y([k]
